#include <itho.h>
#include <cc1150.h>

CC1150 cc1150;

void Itho::setup(void) {
	cc1150.setup();
}

void Itho::begin(void) {
	cc1150.begin();
}

void Itho::end(void) {
	cc1150.end();
}

/*
Expected output for default CC1150:

Status registers
CC1150_PARTNUM = 2
CC1150_VERSION = 4
CC1150_MARCSTATE = 1
CC1150_PKTSTATUS = 2
CC1150_VCO_VC_DAC = 94
CC1150_TXBYTES = 0

Configuration registers
CC1150_IOCFG1 = 2E
CC1150_IOCFG0 = 3F
CC1150_FIFOTHR = 7
CC1150_SYNC1 = D3
CC1150_SYNC0 = 91
CC1150_PKTLEN = FF
CC1150_PKTCTRL0 = 45
CC1150_CHANNR = 0
CC1150_FREQ2 = 1E
CC1150_FREQ1 = C4
CC1150_FREQ0 = EC
CC1150_MDMCFG4 = C
CC1150_MDMCFG3 = 22
CC1150_MDMCFG2 = 12
CC1150_MDMCFG1 = 22
CC1150_MDMCFG0 = F8
CC1150_DEVIATN = 47
CC1150_MCSM1 = 0
CC1150_MCSM0 = 8
CC1150_FREND0 = 10
CC1150_FSCAL3 = A9
CC1150_FSCAL2 = A
CC1150_FSCAL1 = 20
CC1150_FSCAL0 = D
CC1150_FSTEST = 57
CC1150_PTEST = 7F
CC1150_TEST2 = 0
CC1150_TEST1 = 21
CC1150_TEST0 = B
*/
void Itho::printRegisters() {
	Serial.println("Status registers");
	printRegister(CC1150_PARTNUM, CC1150_STATUS_REGISTER, "CC1150_PARTNUM");
	printRegister(CC1150_VERSION, CC1150_STATUS_REGISTER, "CC1150_VERSION");
	printRegister(CC1150_MARCSTATE, CC1150_STATUS_REGISTER, "CC1150_MARCSTATE");
	printRegister(CC1150_PKTSTATUS, CC1150_STATUS_REGISTER, "CC1150_PKTSTATUS");
	printRegister(CC1150_VCO_VC_DAC, CC1150_STATUS_REGISTER, "CC1150_VCO_VC_DAC");
	printRegister(CC1150_TXBYTES, CC1150_STATUS_REGISTER, "CC1150_TXBYTES");
	Serial.println("");

	Serial.println("Configuration registers");
	printRegister(CC1150_IOCFG1, CC1150_CONFIG_REGISTER, "CC1150_IOCFG1");
	printRegister(CC1150_IOCFG0, CC1150_CONFIG_REGISTER, "CC1150_IOCFG0");
	printRegister(CC1150_FIFOTHR, CC1150_CONFIG_REGISTER, "CC1150_FIFOTHR");
	printRegister(CC1150_SYNC1, CC1150_CONFIG_REGISTER, "CC1150_SYNC1");
	printRegister(CC1150_SYNC0, CC1150_CONFIG_REGISTER, "CC1150_SYNC0");
	printRegister(CC1150_PKTLEN, CC1150_CONFIG_REGISTER, "CC1150_PKTLEN");
	printRegister(CC1150_PKTCTRL0, CC1150_CONFIG_REGISTER, "CC1150_PKTCTRL0");
	printRegister(CC1150_CHANNR, CC1150_CONFIG_REGISTER, "CC1150_CHANNR");
	printRegister(CC1150_FREQ2, CC1150_CONFIG_REGISTER, "CC1150_FREQ2");
	printRegister(CC1150_FREQ1, CC1150_CONFIG_REGISTER, "CC1150_FREQ1");
	printRegister(CC1150_FREQ0, CC1150_CONFIG_REGISTER, "CC1150_FREQ0");
	printRegister(CC1150_MDMCFG4, CC1150_CONFIG_REGISTER, "CC1150_MDMCFG4");
	printRegister(CC1150_MDMCFG3, CC1150_CONFIG_REGISTER, "CC1150_MDMCFG3");
	printRegister(CC1150_MDMCFG2, CC1150_CONFIG_REGISTER, "CC1150_MDMCFG2");
	printRegister(CC1150_MDMCFG1, CC1150_CONFIG_REGISTER, "CC1150_MDMCFG1");
	printRegister(CC1150_MDMCFG0, CC1150_CONFIG_REGISTER, "CC1150_MDMCFG0");
	printRegister(CC1150_DEVIATN, CC1150_CONFIG_REGISTER, "CC1150_DEVIATN");
	printRegister(CC1150_MCSM1, CC1150_CONFIG_REGISTER, "CC1150_MCSM1");
	printRegister(CC1150_MCSM0, CC1150_CONFIG_REGISTER, "CC1150_MCSM0");
	printRegister(CC1150_FREND0, CC1150_CONFIG_REGISTER, "CC1150_FREND0");
	printRegister(CC1150_FSCAL3, CC1150_CONFIG_REGISTER, "CC1150_FSCAL3");
	printRegister(CC1150_FSCAL2, CC1150_CONFIG_REGISTER, "CC1150_FSCAL2");
	printRegister(CC1150_FSCAL1, CC1150_CONFIG_REGISTER, "CC1150_FSCAL1");
	printRegister(CC1150_FSCAL0, CC1150_CONFIG_REGISTER, "CC1150_FSCAL0");
	printRegister(CC1150_FSTEST, CC1150_CONFIG_REGISTER, "CC1150_FSTEST");
	printRegister(CC1150_PTEST, CC1150_CONFIG_REGISTER, "CC1150_PTEST");
	printRegister(CC1150_TEST2, CC1150_CONFIG_REGISTER, "CC1150_TEST2");
	printRegister(CC1150_TEST1, CC1150_CONFIG_REGISTER, "CC1150_TEST1");
	printRegister(CC1150_TEST0, CC1150_CONFIG_REGISTER, "CC1150_TEST0");
}

void Itho::printRegister(uint8_t addr, uint8_t registerType, char *name) {
	Serial.print(name);
	Serial.print(" = ");
	uint8_t val = cc1150.readRegister(addr, registerType);
	Serial.println(val, HEX);
}